No olvidar configurar el git con nombre del usuario y el correo.

git config : para ver las configuraciones que se puede hacer

git config --list : se ve la configuracion por defecto de git

git config --list --show-origin : para ver donde estan guardadas las configuraciones

git config --global : significa que cambiaremos en las variables globales de la configuracion

git config --global user.name "Antonio Peña" : para modificar el usuario y que su nombre sea Antonio Peña

git config --global user.email "sirantoniog@gmail.com" : para establecer el email del usuario en sirantoniog@gmail.com


Comandos basicos:

git status : para ver el estado del repositorio si hay cambios o commits pendientes

git log historia.txt : muestra el historial del archivo, los commits realizados en este, los cambios qrealizados en cada uno

git add historia.txt : añade al stage el archivo o archivos que tienen cambios o modificaciones, siempre hacer git add antes de un commit


git show historiaGit.txt: muestra los cambios ocurridos sobre el archivo

git diff indicadorcommit1 indicadoridcommit2 : para ver las diferencias entre el cambio entre el primer comit y el 2do commit

*****como ejercio verificar diferencias entre uno y otro commit*******

git log --oneline :  muestra en una linea los commits realizados
por ejemplo:
919f10b Se escribe una sugerencia: *****como ejercio verificar diferencias entre uno y otro commit*******
58eb198 Agregado el la funcionalidad del comando git diff en el archivo historiaGit.tx
4ae3b9a Agregado otro comando y su funcionalidad, comando git show
d59ffba Se ha cambiado el nombre del archivo historia.txt por historiaGit.txt
1784cc3 Agregado los comandos basicos como status, log, add al archivo historia.txt
20c1db5 Agregadas instrucciones de configuracion en el archivo historia.txt
63b8d7b Archivo historia.txt creado


git reset indicadorcommit --hard : todo regresa al estado anterior
git reset indicadorcommit --soft : volvemos a la version anterior pero en lo que esta en el staging si que ahi 


*****Proceso para conectarse con repositorio remoto*******
CREAR LLAVES SSH PUBLICA Y PRIVADA POR CADA REPOSITORIO/DISPOSITIVO
//Conectarse con SSH que es mucho mas seguro que HTTPS, conectarse con la llave puclica al GitHub
**generar las llaves SSH
ssh-keygen -t rsa -b 4096 -C "sirantoniog@gmail.com" : para generar las llaves de SSH, deben asegurarse de esar en el home del sistema

**verificar que este corriendo el agente ssh
eval $(ssh-agent -s) : evalua que el comando se ha disparado, en este caso que el agente ssh este corriendo

**agregar la llave privada creada al sistema. ojooooo ojoooo nunca mostrar la llave privada 
ssh-add ~/.ssh/id_rsa : añade la llave al entorno en este caso linux o windows

vim config : para crear el archivo config necesario en el entorno MAC, el archivo no tiene extension simplemente su nombre config
en el archivo colocar:

Host *
    AddKeysToAgent yes
    UseKeychain yes
    IdentifyFile ~/.ssh/id_rsa

ssh-add -K ~/.ssh/id_rsa : añade la llave al entorno mac, -K es porque en mac tiene un espacio donde guarda contraseñas, en caso de dar error quitar el -K

//Conectar repositorio local con el remoto
git remote add origin https://github.com/SirAntonioG/hyperblog2.git : agrega un origen remoto para nuestros archivo, en este caso usando el protocolo HTTPS de nuestro repositorio remoto

git remote -v : muestra la url de los repositorios, para cambiarlo usar git remote set-url
git remote set-url origin git@github.com:SirAntonioG/hyperblog2.git : cambia la url del repositorio remoto en este caso es con el protocolo SSH

git pull origin main : para traer lo del repositorio remoto al repositorio local
git pull origin main --allow-unrelated-histories : permite traer el repositorio remoto fusionando lo que tiene el remoto con lo que se tiene en local, sin el problema de las historias no relacionadas

git push origin main : sube lo que esta en el repositorio local al repositorio remoto

SIEMPRE HACER UN PULL DEL REPOSITORIO REMOTO ANTES DE HACER UN PUSH

// historia del proyecto de manera decorada
git log --all : muestra todo lo hecho historicamente
git log --all --graph : muestra graficamente las ramas
git log --all --graph --decorate --oneline : muestra todo el log la historia de manera decorada

**agregar un alias a este comando largo
alias arbolito="git log --all --graph --decorate --oneline"

//crear tags
git tag -a v0.1 -m "Resultado de las primeras clases del curso" 5e2882c : crea el tag v0.1 con un el mensaje (resultado de las pri....) diendo que el tag esta en el hash 5e2882c

git tag : muestra una lista de los tags existentes

git show-ref --tags : muestra las referencias de los tags, muestra a que hash o commit estan asignados los tags